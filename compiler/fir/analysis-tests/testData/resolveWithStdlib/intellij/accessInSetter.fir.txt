FILE: accessInSetter.kt
    public final class DrawableGrid : R|kotlin/Any| {
        public constructor(): R|DrawableGrid| {
            super<R|kotlin/Any|>()
        }

        public final fun clearSelection(): R|kotlin/Unit| {
        }

        public final var selectedIndex: R|kotlin/Int| = Int(0)
            public get(): R|kotlin/Int|
            public set(value: R|kotlin/Int|): R|kotlin/Unit|

        public final var isEnabled: R|kotlin/Boolean| = Boolean(false)
            public get(): R|kotlin/Boolean|
            public set(value: R|kotlin/Boolean|): R|kotlin/Unit|

    }
    public final class My : R|kotlin/Any| {
        public constructor(): R|My| {
            super<R|kotlin/Any|>()
        }

        private final val drawableGrid: R|DrawableGrid| = this@R|/My|.R|/My.createDrawableGrid|()
            private get(): R|DrawableGrid|

        private final var useAll: R|kotlin/Boolean| = Boolean(false)
            private get(): R|kotlin/Boolean|
            private set(value: R|kotlin/Boolean|): R|kotlin/Unit| {
                this@R|/My|.F|/My.useAll| = R|<local>/value|
                this@R|/My|.R|/My.drawableGrid|.R|/DrawableGrid.isEnabled| = R|<local>/value|.R|kotlin/Boolean.not|()
                when () {
                    R|<local>/value| ->  {
                        this@R|/My|.R|/My.drawableGrid|.R|/DrawableGrid.clearSelection|()
                    }
                    else ->  {
                        this@R|/My|.R|/My.drawableGrid|.R|/DrawableGrid.selectedIndex| = Int(0)
                    }
                }

            }

        private final fun createDrawableGrid(): R|DrawableGrid| {
            ^createDrawableGrid R|/DrawableGrid.DrawableGrid|()
        }

    }
